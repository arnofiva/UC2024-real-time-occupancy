import{h4 as M,h6 as b,h5 as T,ar as _,as as D,at as S,au as L,ho as v,aP as y,ax as E,aw as g,cf as l,hz as A,aK as u,hA as k,cy as N,cv as w,cz as R,cJ as C,aj as o,ak as r,aC as I,cm as G,aE as $,am as O,cE as j,cF as z,aF as U}from"./index-755e30b3.js";import{a as d,M as F,T as P,E as K}from"./KnowledgeGraphSublayer-ff21a84d.js";import{R as x}from"./knowledgeGraphService-31fae834.js";import"./FeatureStore-8cb4fc3d.js";import"./BoundsStore-a18349ce.js";import"./PooledRBush-4d0f695e.js";import"./quickselect-ec9600b4.js";import"./QueryEngine-d076173c.js";import"./normalizeUtils-9040309c.js";import"./normalizeUtilsCommon-666f5b60.js";import"./WhereClause-46b3a227.js";import"./TimeOnly-2e6e7531.js";import"./json-48e3ea08.js";import"./utils-5f23e483.js";import"./utils-9aa3b443.js";import"./utils-35cc9879.js";import"./ClassBreaksDefinition-65083246.js";import"./optimizedFeatureQueryEngineAdapter-1990669b.js";import"./GraphQueryStreaming-85c9f786.js";let n=class extends M(b(T(_(D(S(L(v(U)))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(y.ofType(d)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(y.ofType(d)),this.type="knowledge-graph",this.url=null}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(t){E(t)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache()}async _fetchMetadata(){if(!this.url)throw new g("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await x(this.url);this.knowledgeGraph=e,this._forEachGraphType(t=>{t.name&&this._graphTypeLookup.set(t.name,t)})}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===l.USER?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new F({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await P(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach(t=>{const i=this._graphTypeLookup.get(t.graphTypeName);i&&!e.namedTypeDefinitions.has(i.name)&&e.namedTypeDefinitions.set(i.name,{useAllData:!0})}),this.setAtOrigin("inclusionModeDefinition",e,A(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:t}=e;if(t?.size>0)t.forEach((i,a)=>{const s=this._graphTypeLookup.get(a);if(!s)return u.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't in the data model and will be removed`),void t.delete(a);s.type!=="relationship"&&s.type!=="entity"&&(u.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't properly modeled and will be removed`),t.delete(a))});else if(!e.generateAllSublayers)throw new g("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){let e=[],t=[];const{inclusionModeDefinition:i}=this,a=i?.namedTypeDefinitions;!i||i.generateAllSublayers?(e=this.knowledgeGraph.dataModel?.entityTypes??[],t=this.knowledgeGraph.dataModel?.relationshipTypes??[]):a&&a.size>0&&a.forEach((s,h)=>{const p=this._graphTypeLookup.get(h);switch(p?.type){case"relationship":t.push(p);break;case"entity":e.push(p)}}),this.memberEntityTypes=e,this.memberRelationshipTypes=t}_forEachGraphType(e){[...this.knowledgeGraph.dataModel?.entityTypes??[],...this.knowledgeGraph.dataModel?.relationshipTypes??[]].forEach(t=>{e(t)})}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const t=[];this.dataManager.addToLayer(e);for(const i of e)this.sublayerIdsCache.has(i.typeName)||(this.sublayerIdsCache.set(i.typeName,new Set),t.push(i.typeName)),this.sublayerIdsCache.get(i.typeName).add(i.id);for(const i of t){const a=this._graphTypeLookup.get(i);a&&(this._addSublayer(a).title=i,a.type==="entity"?this.dataManager.entityTypeNames.add(i):this.dataManager.relationshipTypeNames.add(i),this.dataManager.sublayerCaches.set(i,new Map))}this._refreshNamedTypes()}_createSublayers(e,t,i){e.forEach(a=>{const s=this._createSublayer(a);i(s)&&t.push(s),this._updateSublayerCaches(a)})}_addSublayer(e){const t=this._createSublayer(e);return t.geometryType?this.layers.push(t):this.tables.push(t),t}_createSublayer(e){return new d({objectType:e,parentCompositeLayer:this,graphType:e.type,title:e.name})}_updateSublayers(e,t){t.forEach(i=>{i.parentCompositeLayer=this;const a=e.find(s=>s.type===i.graphType&&s.name===i.graphTypeName);a&&(i.objectType=a,i.read({title:a.name},{origin:"service"}),this._updateSublayerCaches(a))})}_updateSublayerCaches(e){const t=this.dataManager.sublayerCaches;t.has(e.name)||t.set(e.name,new Map)}_saveUrlAsNewResource(e,t,i,a){e[t]="<pending>",i.pendingOperations.push(V(this.inclusionModeDefinition).then(s=>{const h=B(a);e[t]=h.itemRelativeUrl,i.toAdd.push({resource:h,content:{type:"blob",blob:s},compress:!1,finish:p=>{this.definitionSetMap=p.url}})}))}_displaysAllRecords(e){for(const[,{useAllData:t}]of e.namedTypeDefinitions)if(!t)return!1;return!0}readDefinitionSetMap(e,t,i){return k(e,i)}writeDefinitionSetMap(e,t,i,a){const s=a?.portalItem,h=a?.resources,p=N(a?.origin);if(!s||!h||p==null)return void(e&&(t[i]=w(e,a)));const{inclusionModeDefinition:f}=this;if(!f||this._displaysAllRecords(f))return void(this.definitionSetMap=null);const c=this.originIdOf("inclusionModeDefinition");if(c===l.USER||this._namedTypesModified||p<c)this._saveUrlAsNewResource(t,i,h,s);else if(p===c&&e){const m=w(e,a);R(m)?this._saveUrlAsNewResource(t,i,h,s):t[i]=m}}set inclusionModeDefinition(e){this.loadStatus!=="loaded"&&this.loadStatus!=="failed"?this._set("inclusionModeDefinition",e):u.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}loadLayerAssumingLocalCache(){const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.originIdOf("layers")===l.DEFAULTS?this._createSublayers(e,this.layers,t=>!!t.geometryType):this._updateSublayers(e,this.layers),this.originIdOf("tables")===l.DEFAULTS?this._createSublayers(e,this.tables,t=>!t.geometryType):this._updateSublayers(e,this.tables),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((t,i)=>{const a=C(this.sublayerIdsCache,i,()=>new Set);t.members?.forEach(s=>{a.add(s.id)})})}async addRecords(e){await this._handleNewRecords(e)}async removeRecords(e){const t=[];for(const i of e)this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(i.typeName)?.useAllData===!1&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(i.typeName)?.members?.has(i.id)&&t.push(i);this.dataManager.removeFromLayer(t);for(const i of t)this.sublayerIdsCache.get(i.typeName)?.delete(i.id);return this._refreshNamedTypes(),t}};o([r()],n.prototype,"dataManager",void 0),o([r({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],n.prototype,"definitionSetMap",void 0),o([I("definitionSetMap")],n.prototype,"readDefinitionSetMap",null),o([G("definitionSetMap")],n.prototype,"writeDefinitionSetMap",null),o([r()],n.prototype,"inclusionModeDefinition",null),o([r()],n.prototype,"knowledgeGraph",void 0),o([r({type:y.ofType(d),json:{write:{ignoreOrigin:!0}}})],n.prototype,"layers",void 0),o([r()],n.prototype,"memberEntityTypes",void 0),o([r()],n.prototype,"memberRelationshipTypes",void 0),o([r({type:["KnowledgeGraphLayer"]})],n.prototype,"operationalLayerType",void 0),o([r()],n.prototype,"sublayerIdsCache",void 0),o([r({type:y.ofType(d),json:{write:{ignoreOrigin:!0}}})],n.prototype,"tables",void 0),o([r({json:{read:!1}})],n.prototype,"type",void 0),o([r($)],n.prototype,"url",void 0),n=o([O("esri.layers.KnowledgeGraphLayer")],n);const le=n;async function V(e){const t=await K(e);return new Blob([t],{type:"application/x-protobuf"})}function B(e){const t=`definitionSetMap-${j()}.dat`,i=z("knowledgeGraphLayer",t);return e.resourceFromPath(i)}export{le as default};
