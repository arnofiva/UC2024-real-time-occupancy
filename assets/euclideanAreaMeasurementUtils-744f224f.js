import{ja as l,jb as y,jc as R,jd as v,cM as h,ef as m,eb as C,je as M,jf as U,jg as k,jh as x,eL as A,ji as F,jj as W}from"./index-ab96db07.js";import{geodesicArea as w}from"./geometryEngine-ebfb00c5.js";import{p as K,y as L}from"./geodesicLengthMeasurementUtils-b0b02496.js";function J(n){const{spatialReference:e}=n;return K(e,S,Z,n)}function S(n){return l(Math.abs(L([n],"square-meters")[0]),"square-meters")}function Z(n){try{return l(Math.abs(w(n,"square-meters")),"square-meters")}catch{return null}}function N(n,e=d()){return $(n,e)}function O(n,e=d()){return $(n,e,!1)}function $(n,e,o=n.hasZ){const a=R(n.spatialReference),u=v(a);if(u==null)return null;const q=(c,s)=>!(s.length<2)&&(m(c,s[0],s[1],o&&s[2]||0),!0);let j=0;for(const c of n.rings){const s=c.length;if(s<3)continue;const{positionsWorldCoords:r}=e;for(;r.length<s;)r.push(h());const p=z,i=m(B,0,0,0),b=1/s;for(let t=0;t<s;t++){if(!q(p,c[t])||!C(p,n.spatialReference,r[t],a))return null;M(i,i,r[t],b)}const g=U(r[0],r[1],i,k());if(x(A(g))===0)continue;for(let t=0;t<s;t++)F(g,i,r[t],r[t]);const f=D(r);for(let t=0;t<f.length;t+=3)j+=W(r[f[t]],r[f[t+1]],r[f[t+2]])}return l(j,u)}const z=h(),B=h();function d(){return{positionsWorldCoords:[]}}function D(n){return y(E(n),[],2)}function E(n){const e=new Float64Array(2*n.length);for(let o=0;o<n.length;++o){const a=n[o],u=2*o;e[u]=a[0],e[u+1]=a[1]}return e}export{d as U,N as g,O as j,D as k,J as o};
