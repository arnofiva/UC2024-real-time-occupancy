import{h$ as f,i0 as g,gY as m,i1 as E,i2 as _,ah as w,ak as v,i3 as b,i4 as y,bn as h,aB as L,e5 as V,i5 as P,i6 as S,i7 as C,i8 as u}from"./index-6a39f5fd.js";const j=1e3;function I(t,e,n){const s=E(),i=_(s);return f(i,i,t,.5),f(i,i,e,.5),s[3]=g(i,t),m(i,i,n),s}let l=class{constructor(){this._idToComponent=new Map,this._components=new b(t=>t.bounds),this._edges=new b(t=>t.bounds),this._tmpLineSegment=y(),this._tmpP1=h(),this._tmpP2=h(),this._tmpP3=h(),this.remoteClient=null}async fetchCandidates(t,e){await Promise.resolve(),L(e),await this._ensureEdgeLocations(t,e);const n=[];return this._edges.forEachNeighbor(s=>(this._addCandidates(t,s,n),n.length<j),t.bounds),{result:{candidates:n}}}async _ensureEdgeLocations(t,e){const n=[];if(this._components.forEachNeighbor(o=>{if(o.info==null){const{id:c,uid:d}=o;n.push({id:c,uid:d})}return!0},t.bounds),!n.length)return;const s={components:n},i=await this.remoteClient.invoke("fetchAllEdgeLocations",s,e??{});for(const o of i.components)this._setFetchEdgeLocations(o)}async add(t){const e=new p(t.id,t.bounds);return this._idToComponent.set(e.id,e),this._components.add([e]),{result:{}}}async remove(t){const e=this._idToComponent.get(t.id);if(e){const n=[];this._edges.forEachNeighbor(s=>(s.component===e&&n.push(s),!0),e.bounds),this._edges.remove(n),this._components.remove([e]),this._idToComponent.delete(e.id)}return{result:{}}}_setFetchEdgeLocations(t){const e=this._idToComponent.get(t.id);if(e==null||t.uid!==e.uid)return;const n=V.createView(t.locations),s=new Array(n.count),i=h(),o=h();for(let a=0;a<n.count;a++){n.position0.getVec(a,i),n.position1.getVec(a,o);const r=I(i,o,t.origin),x=new T(e,a,r);s[a]=x}this._edges.add(s);const{objectIds:c,origin:d}=t;e.info={locations:n,objectIds:c,origin:d}}_addCandidates(t,e,n){const{info:s}=e.component,{origin:i,objectIds:o}=s,c=s.locations,d=c.position0.getVec(e.index,this._tmpP1),a=c.position1.getVec(e.index,this._tmpP2);m(d,d,i),m(a,a,i);const r=o[c.componentIndex.get(e.index)];this._addEdgeCandidate(t,r,d,a,n),this._addVertexCandidate(t,r,d,n),this._addVertexCandidate(t,r,a,n)}_addEdgeCandidate(t,e,n,s,i){if(!t.returnEdge)return;const o=_(t.bounds),c=P(n,s,this._tmpLineSegment),d=S(c,o,this._tmpP3);C(t.bounds,d)&&i.push({type:"edge",objectId:e,target:u(d),distance:g(o,d),start:u(n),end:u(s)})}_addVertexCandidate(t,e,n,s){if(!t.returnVertex)return;const i=_(t.bounds);C(t.bounds,n)&&s.push({type:"vertex",objectId:e,target:u(n),distance:g(i,n)})}};l=w([v("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorker")],l);const k=l;class p{constructor(e,n){this.id=e,this.bounds=n,this.info=null,this.uid=++p.uid}}p.uid=0;class T{constructor(e,n,s){this.component=e,this.index=n,this.bounds=s}}export{k as default};
