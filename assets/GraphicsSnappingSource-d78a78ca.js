import{aq as f,ah as v,ai as u,hY as S,aQ as w,ce as k,h_ as b,aB as h,aZ as E,gK as F,al as C,h$ as y,aG as G,em as P,ge as $,gm as A,gM as I,g7 as H,ei as R,aj as r,ak as l,am as O,hZ as Z,i0 as x}from"./index-ab96db07.js";import{t as z}from"./memoize-3e55df82.js";import{a as M}from"./normalizeUtilsSync-597f881a.js";import{m as L}from"./FeatureStore-536287ab.js";import{$ as W}from"./QueryEngine-e4c55ed5.js";import{f as j,y as q}from"./SnappingManagerPool-45ad664b.js";import{o as J,i as N}from"./queryEngineUtils-e30c312a.js";import{i as g,r as T,n as m}from"./symbologySnappingCandidates-d4c20b1f.js";import"./normalizeUtilsCommon-6ab3a73c.js";import"./BoundsStore-e64d6a6f.js";import"./PooledRBush-81406012.js";import"./quickselect-6bdb87cc.js";import"./optimizedFeatureQueryEngineAdapter-6cdbde2c.js";import"./normalizeUtils-050de560.js";import"./WhereClause-11cd8876.js";import"./TimeOnly-0ea1f14a.js";import"./json-48e3ea08.js";import"./utils-b5d3e760.js";import"./utils-6fba2c13.js";import"./utils-3bd43217.js";import"./ClassBreaksDefinition-78fccd7d.js";import"./geodesicLengthMeasurementUtils-b0b02496.js";import"./geometryEngine-ebfb00c5.js";import"./geometryEngineBase-2eacdee6.js";import"./hydrated-33355f53.js";import"./geometry2dUtils-bc57a82d.js";import"./floorFilterUtils-73949d2d.js";import"./keybindings-65d19bf6.js";import"./VertexSnappingCandidate-9321ff67.js";import"./PointSnappingHint-6e3082e3.js";const _="graphics-collections";let a=class extends f{get updating(){return this._updatingHandles.updating}get _hasZ(){const e=this.view;return e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d";if(!i||t.type==="map-notes")return g();const s=async(o,n)=>(await Z(e.whenLayerView(t),n)).elevationAlignPointsInFeatures(o,n);return g(i,{elevationInfo:t.elevationInfo,alignPointsInFeatures:s})}get _snappingElevationFilter(){const{view:e}=this,t=e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="map-notes";return T(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource,i=e!=null&&e.type==="3d",s=this._extrudedPolygonSymbolsCount>0;return i&&t.type!=="map-notes"&&s?m(s,async(o,n)=>{const p=await e.whenLayerView(t);return h(n),p.queryForSymbologySnapping({candidates:o,spatialReference:e.spatialReference},n)}):m()}constructor(e){super(e),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0,this._updatingHandles=new v,this._memoizedMakeGetGroundElevation=z(N)}destroy(){for(const e of this._pendingAdds)e.task.abort();this._pendingAdds.length=0,this._mapSources(e=>this._destroySource(e)),this._updatingHandles.destroy()}initialize(){this._updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this._updatingHandles.removeHandles(_);for(const s of i)this._addMany(s.graphics.toArray()),this.addHandles([s.on("graphic-update",o=>this._onGraphicUpdate(o)),this._updatingHandles.addOnCollectionChange(()=>s.graphics,o=>this._onGraphicsChanged(o))],_)},u);const{view:e}=this,{layer:t}=this.layerSource;e!=null&&e.type==="3d"&&t.type!=="map-notes"&&e.elevationProvider&&this.addHandles([e.elevationProvider.on("elevation-change",({context:i})=>{S(i,t.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),w(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),u),k(()=>t,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(e,t){const{point:i,coordinateHelper:{spatialReference:s}}=e,o=await b(this._mapSources(d=>this._fetchCandidatesForSource(d,e,t)));h(t);const n=this._memoizedMakeGetGroundElevation(this.view,s),p=o.flat().map(d=>J(d,n));return j(i,p),p}async _fetchCandidatesForSource(e,t,i){const s=q(t,this.view?.type??"2d"),o=await e.queryEngine.executeQueryForSnapping(s,i);h(i);const n=await this._snappingElevationAligner.alignCandidates(o.candidates,t.coordinateHelper.spatialReference,i);h(i);const p=await this._symbologySnappingFetcher.fetch(n,i);h(i);const d=p.length===0?n:[...n,...p];return this._snappingElevationFilter.filter(s,d)}refresh(){}_onGraphicUpdate(e){if(this.getGraphicsLayers().some(t=>t.graphics.includes(e.graphic)))switch(e.property){case"geometry":case"visible":this._remove(e.graphic),this._addMany([e.graphic])}}_onGraphicsChanged(e){for(const t of e.removed)this._remove(t);this._addMany(e.added)}_addMany(e){const t=[],i=new Map;for(const s of e)s.geometry!=null&&(this._needsInitializeProjection(s.geometry.spatialReference)?(t.push(s.geometry.spatialReference),i.set(s.uid,s)):this._add(s));this._createPendingAdd(t,i)}_createPendingAdd(e,t){if(!e.length)return;const i=E(async n=>{await F(e.map(p=>({source:p,dest:this.spatialReference})),{signal:n}),this._markLoadedSpatialReferences(e);for(const[,p]of t)this._add(p)});this._updatingHandles.addPromise(i.promise);const s={task:i,graphics:t},o=()=>x(this._pendingAdds,s);i.promise.then(o,o),this._pendingAdds.push(s)}_markLoadedSpatialReferences(e){for(const t of e){t.wkid!=null&&this._loadedWkids.add(t.wkid);const i=t.wkt2||t.wkt;i&&this._loadedWkts.add(i)}}_add(e){if(e.geometry==null||!e.visible)return;let t=e.geometry;if(t.type==="mesh")return;t.type==="extent"&&(t=C.fromExtent(t));const i=this._ensureSource(t.type);if(i==null)return;const s=this._createOptimizedFeature(e.uid,t);s!=null&&(i.featureStore.add(s),y(e.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(e){if(e.wkid!=null&&this._loadedWkids.has(e.wkid))return!1;const t=e.wkt2||e.wkt;return(!t||!this._loadedWkts.has(t))&&!G(e,this.spatialReference)}_createOptimizedFeature(e,t){const i=P(M(t),this.spatialReference);if(!i)return null;const s=this._ensureGeometryHasZ(i),o=$(s,this._hasZ,!1);return new A(o,{[c]:e},null,e)}_ensureGeometryHasZ(e){if(!this._hasZ)return e;const t=s=>{for(;s.length<3;)s.push(0)},i=e.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(t);break;case"polyline":i.paths.forEach(s=>s.forEach(t));break;case"polygon":i.rings.forEach(s=>s.forEach(t))}return i}_ensureSource(e){const t=this._sources[e];if(t!=null)return t;const i=this._createSource(e);return this._sources[e]=i,i}_createSource(e){const t=I.toJSON(e),i=this._hasZ,s=new L({geometryType:t,hasZ:i,hasM:!1});return{featureStore:s,queryEngine:new W({featureStore:s,fieldsIndex:H.fromLayerJSON({fields:[{name:c,type:"esriFieldTypeOID",alias:c}]}),geometryType:t,hasM:!1,hasZ:i,objectIdField:c,spatialReference:this.spatialReference,priority:R.SNAPPING,scheduler:this.view!=null&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:e}}_remove(e){this._mapSources(t=>this._removeFromSource(t,e));for(const t of this._pendingAdds)t.graphics.delete(e.uid),t.graphics.size===0&&t.task.abort()}_removeFromSource(e,t){const i=t.uid;e.featureStore.has(i)&&(e.featureStore.removeById(t.uid),y(t.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(e){e.queryEngine.destroy(),this._sources[e.type]=null}_mapSources(e){const{point:t,polygon:i,polyline:s,multipoint:o}=this._sources,n=[];return t!=null&&n.push(e(t)),i!=null&&n.push(e(i)),s!=null&&n.push(e(s)),o!=null&&n.push(e(o)),n}};r([l()],a.prototype,"getGraphicsLayers",void 0),r([l({constructOnly:!0})],a.prototype,"layerSource",void 0),r([l({constructOnly:!0})],a.prototype,"spatialReference",void 0),r([l({constructOnly:!0})],a.prototype,"view",void 0),r([l({readOnly:!0})],a.prototype,"updating",null),r([l({readOnly:!0})],a.prototype,"availability",void 0),r([l()],a.prototype,"_hasZ",null),r([l()],a.prototype,"_snappingElevationAligner",null),r([l()],a.prototype,"_snappingElevationFilter",null),r([l()],a.prototype,"_symbologySnappingFetcher",null),r([l()],a.prototype,"_extrudedPolygonSymbolsCount",void 0),a=r([O("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],a);const c="OBJECTID";export{a as GraphicsSnappingSource};
