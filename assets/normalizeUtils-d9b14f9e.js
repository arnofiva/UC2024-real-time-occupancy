import{c0 as X,hD as T,gg as v,ay as C,hV as k,fV as K,l0 as W,l1 as _,h7 as B,d1 as E,bu as F,ic as z,aK as G,al as U,ib as H,aw as Q}from"./index-ee8e5ecc.js";import{r as L,o as P,i as b,s as D}from"./normalizeUtilsCommon-2270a178.js";async function Y(e,s,c,n){const t=X(e),f=s[0].spatialReference,l={...n,responseType:"json",query:{...t.query,f:"json",sr:T(f),target:JSON.stringify({geometryType:v(s[0]),geometries:s}),cutter:JSON.stringify(c)}},o=await C(t.path+"/cut",l),{cutIndexes:u,geometries:m=[]}=o.data;return{cutIndexes:u,geometries:m.map(h=>{const x=k(h);return x.spatialReference=f,x})}}async function Z(e,s,c){const n=typeof e=="string"?K(e):e,t=s[0].spatialReference,f=v(s[0]),l={...c,query:{...n.query,f:"json",sr:T(t),geometries:JSON.stringify(W(s))}},{data:o}=await C(n.path+"/simplify",l);return _(o.geometries,f,t)}const V=()=>G.getLogger("esri.geometry.support.normalizeUtils");function ee(e){return e.type==="polygon"}function te(e){return e[0].type==="polygon"}function se(e){return e[0].type==="polyline"}function ne(e,s){if(!(e instanceof F||e instanceof U)){const t="straightLineDensify: the input geometry is neither polyline nor polygon";throw V().error(t),new Q(t)}const c=P(e),n=[];for(const t of c){const f=[];n.push(f),f.push([t[0][0],t[0][1]]);for(let l=0;l<t.length-1;l++){const o=t[l][0],u=t[l][1],m=t[l+1][0],h=t[l+1][1],x=Math.sqrt((m-o)*(m-o)+(h-u)*(h-u)),a=(h-u)/x,d=(m-o)/x,p=x/s;if(p>1){for(let N=1;N<=p-1;N++){const j=N*s,r=d*j+o,i=a*j+u;f.push([r,i])}const $=(x+Math.floor(p-1)*s)/2,M=d*$+o,S=a*$+u;f.push([M,S])}f.push([m,h])}}return ee(e)?new U({rings:n,spatialReference:e.spatialReference}):new F({paths:n,spatialReference:e.spatialReference})}function J(e,s,c){if(s){const n=ne(e,1e6);e=H(n,!0)}return c&&(e=D(e,c)),e}function O(e,s,c){if(Array.isArray(e)){const n=e[0];if(n>s){const t=b(n,s);e[0]=n+t*(-2*s)}else if(n<c){const t=b(n,c);e[0]=n+t*(-2*c)}}else{const n=e.x;if(n>s){const t=b(n,s);e=e.clone().offset(t*(-2*s),0)}else if(n<c){const t=b(n,c);e=e.clone().offset(t*(-2*c),0)}}return e}function oe(e,s){let c=-1;for(let n=0;n<s.cutIndexes.length;n++){const t=s.cutIndexes[n],f=s.geometries[n],l=P(f);for(let o=0;o<l.length;o++){const u=l[o];u.some(m=>{if(m[0]<180)return!0;{let h=0;for(let a=0;a<u.length;a++){const d=u[a][0];h=d>h?d:h}h=Number(h.toFixed(9));const x=-360*b(h,180);for(let a=0;a<u.length;a++){const d=f.getPoint(o,a);f.setPoint(o,a,d.clone().offset(x,0))}return!0}})}if(t===c){if(te(e))for(const o of P(f))e[t]=e[t].addRing(o);else if(se(e))for(const o of P(f))e[t]=e[t].addPath(o)}else c=t,e[t]=f}return e}async function re(e,s,c){if(!Array.isArray(e))return re([e],s);s&&typeof s!="string"&&V().warn("normalizeCentralMeridian()","The url object is deprecated, use the url string instead");const n=typeof s=="string"?s:s?.url??B.geometryServiceUrl;let t,f,l,o,u,m,h,x,a=0;const d=[],p=[];for(const r of e)if(r!=null)if(t||(t=r.spatialReference,f=E(t),l=t.isWebMercator,m=l?102100:4326,o=L[m].maxX,u=L[m].minX,h=L[m].plus180Line,x=L[m].minus180Line),f)if(r.type==="mesh")p.push(r);else if(r.type==="point")p.push(O(r.clone(),o,u));else if(r.type==="multipoint"){const i=r.clone();i.points=i.points.map(y=>O(y,o,u)),p.push(i)}else if(r.type==="extent"){const i=r.clone()._normalize(!1,!1,f);p.push(i.rings?new U(i):i)}else if(r.extent){const i=r.extent,y=b(i.xmin,u)*(2*o);let w=y===0?r.clone():D(r.clone(),y);i.offset(y,0);let{xmin:R,xmax:g}=i;R=Number(R.toFixed(9)),g=Number(g.toFixed(9)),i.intersects(h)&&g!==o?(a=g>a?g:a,w=J(w,l),d.push(w),p.push("cut")):i.intersects(x)&&R!==u?(a=g*(2*o)>a?g*(2*o):a,w=J(w,l,360),d.push(w),p.push("cut")):p.push(w)}else p.push(r.clone());else p.push(r);else p.push(r);let $=b(a,o),M=-90;const S=$,N=new F;for(;$>0;){const r=360*$-180;N.addPath([[r,M],[r,-1*M]]),M*=-1,$--}if(d.length>0&&S>0){const r=oe(d,await Y(n,d,N,c)),i=[],y=[];for(let g=0;g<p.length;g++){const q=p[g];if(q!=="cut")y.push(q);else{const I=r.shift(),A=e[g];A!=null&&A.type==="polygon"&&A.rings&&A.rings.length>1&&I.rings.length>=A.rings.length?(i.push(I),y.push("simplify")):y.push(l?z(I):I)}}if(!i.length)return y;const w=await Z(n,i,c),R=[];for(let g=0;g<y.length;g++){const q=y[g];q!=="simplify"?R.push(q):R.push(l?z(w.shift()):w.shift())}return R}const j=[];for(let r=0;r<p.length;r++){const i=p[r];if(i!=="cut")j.push(i);else{const y=d.shift();j.push(l===!0?z(y):y)}}return j}export{re as R};
