import{aj as s,ak as d,am as f,aK as o,ej as m}from"./index-ea8d34f0.js";import{O as g}from"./WhereClause-839e9f63.js";import{L as x,D as y,Q as D}from"./I3SUtil-eb78623d.js";import{t as F}from"./QueryEngine-90d6bd2d.js";import{i as w}from"./timeSupport-44d77ad4.js";const A="updating";function I(n){return n==="updating"?null:n}function N(n){return n==="updating"}const S=n=>{let r=class extends n{constructor(){super(...arguments),this._definitionExpressionErrors=0,this._maxDefinitionExpressionErrors=20,this.logError=e=>{this._definitionExpressionErrors<this._maxDefinitionExpressionErrors&&o.getLogger(this).error("Error while evaluating definitionExpression: "+e),this._definitionExpressionErrors++,this._definitionExpressionErrors===this._maxDefinitionExpressionErrors&&o.getLogger(this).error("Further errors are ignored")}}get parsedDefinitionExpression(){if(!this.i3slayer?.definitionExpression)return null;try{const e=g.create(this.i3slayer.definitionExpression,this.i3slayer.fieldsIndex);if(!e.isStandardized)return o.getLogger(this).error("definitionExpression is using non standard function"),null;const t=[],i=e.fieldNames;return x(i,this.i3slayer.fields,{missingFields:t}),t.length>0?(o.getLogger(this).error(`definitionExpression references unknown fields: ${t.join(", ")}`),null):(this._definitionExpressionErrors=0,e)}catch(e){return o.getLogger(this).error("Failed to parse definitionExpression: "+e),null}}get definitionExpressionFields(){return this.parsedDefinitionExpression?this.parsedDefinitionExpression.fieldNames:[]}_evaluateClause(e,t){try{return e.testFeature(t)}catch(i){return this.logError(i),!1}}_addDefinitionExpressionToQuery(e){if(!this.parsedDefinitionExpression)return e;const t=this.i3slayer.definitionExpression,i=e.clone();return i.where?i.where=`(${t}) AND (${i.where})`:i.where=t,i}};return s([d({readOnly:!0})],r.prototype,"parsedDefinitionExpression",null),s([d({readOnly:!0})],r.prototype,"definitionExpressionFields",null),r=s([f("esri.views.3d.layers.support.DefinitionExpressionSceneLayerView")],r),r},j=n=>{let r=class extends n{get timeExtent(){return w(this.i3slayer,this.view?.timeExtent,this._get("timeExtent"))}get mergedFilter(){const{filter:e,timeExtent:t}=this;if(t==null)return e;const i=e?.clone()??new m;return t!=null&&(i.timeExtent=i.timeExtent?.intersection(t)??t),i}getTimeFilterDependencies(){const{timeInfo:e}=this.i3slayer;if(e==null)return[];const{startField:t,endField:i}=e;return[t,i]}addTimeFilter(e,t){if(t==null)return;const{timeInfo:i}=this.i3slayer;if(i==null)return;const{startField:l,endField:u,useTime:a}=i;if(!a||l==null&&u==null)return;const p=i.toJSON(),h=t.toJSON();e.push((E,c)=>_(E,c,p,h))}};return s([d({readOnly:!0})],r.prototype,"timeExtent",null),s([d()],r.prototype,"mergedFilter",null),r=s([f("esri.views.3d.layers.support.TemporalSceneLayerView")],r),r};function _(n,r,e,t){const i=r.attributeInfo?.attributeData;if(i==null)return;const{startTimeField:l,endTimeField:u}=e;if(l!=null&&i[l]==null||u!=null&&i[u]==null)return;const a=F(e,t,new b(i));if(a==null)return;const{featureIds:p}=r;y(n,p,a)}class b{constructor(r){this.attributeData=r}getAttribute(r,e){return D(this.attributeData[e],r)}getAttributeAsTimestamp(r,e){const t=this.getAttribute(r,e);return typeof t=="string"?new Date(t).getTime():typeof t=="number"||t==null?t:null}}export{I as a,N as b,A as n,S as t,j as u};
