import{eW as $,fd as w,eY as I,ap as T,aq as E,ar as O,as as M,eX as j,fe as F,ff as R,aw as L,cA as v,cj as g,fg as P,fh as q,ax as f,ch as J,fi as N,f9 as U,fj as A,av as b,bq as k,ah as a,ai as i,fk as x,aC as _,cq as V,aE as z,ak as C,aF as W,fl as Z}from"./index-c0f955a7.js";import{E as B,f as D,X as G}from"./SublayersOwner-2a61e960.js";import{m as H}from"./ExportImageParameters-d837b18a.js";import{t as K}from"./imageBitmapUtils-bc183da3.js";import{e as S}from"./sublayerUtils-7a445087.js";import"./QueryTask-82d13375.js";import"./executeForIds-2fabdd1f.js";import"./query-51127c95.js";import"./pbfQueryUtils-51148051.js";import"./pbf-334ee1bd.js";import"./executeQueryJSON-b46d6877.js";import"./executeQueryPBF-226ff4ca.js";import"./floorFilterUtils-73949d2d.js";let t=class extends $(w(I(B(D(T(E(O(M(j(F(R(W)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(L).then(()=>this._fetchService(r))),Promise.resolve(this)}readImageFormat(e,r){const p=r.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,p,s){if(!this.loaded||!e)return;const l=e.slice().reverse().flatten(({sublayers:n})=>n&&n.toArray().reverse()).toArray();let o=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap?.supportsDynamicLayers){const n=v(s.origin);if(n===g.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;o=S(l,c,g.SERVICE)}else if(n>g.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");o=S(l,c.sublayers,v(c.origin))}}const m=[],h={writeSublayerStructure:o,...s};let d=o;l.forEach(n=>{const c=n.write({},h);m.push(c),d=d||n.originOf("visible")==="user"}),m.some(n=>Object.keys(n).length>1)&&(r.layers=m),d&&(r.visibleLayers=l.filter(n=>n.visible).map(n=>n.id))}createExportImageParameters(e,r,p,s){const l=s?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const o=new H({layer:this,floors:s?.floors,scale:P({extent:e,width:r})*l}),m=o.toJSON();o.destroy();const h=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},d=e?.spatialReference,n=q(d);m.dpi*=l;const c={};if(s?.timeExtent){const{start:y,end:u}=s.timeExtent.toJSON();c.time=y&&u&&y===u?""+y:`${y??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:n,imageSR:n,size:r+","+p,...m,...h,...c}}async fetchImage(e,r,p,s){const{data:l}=await this._fetchImage("image",e,r,p,s);return l}async fetchImageBitmap(e,r,p,s){const{data:l,url:o}=await this._fetchImage("blob",e,r,p,s);return K(l,o,s?.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await f(this.url,r),{extent:s,fullExtent:l,timeExtent:o}=p,m=s||l;return{fullExtent:m&&J.fromJSON(m),timeExtent:o&&N.fromJSON({start:o[0],end:o[1]})}}loadAll(){return U(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return A(this,e)}async _fetchImage(e,r,p,s,l){const o={responseType:e,signal:l?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,p,s,l),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(o.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:h}=await f(m,o);return{data:h,url:m}}catch(h){throw k(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:p}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}};a([i(x("dateFieldsTimeReference"))],t.prototype,"dateFieldsTimeZone",void 0),a([i({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),a([i()],t.prototype,"dpi",void 0),a([i()],t.prototype,"gdbVersion",void 0),a([i()],t.prototype,"imageFormat",void 0),a([_("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),a([i({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),a([i({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),a([i()],t.prototype,"imageTransparency",void 0),a([i({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),a([i({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),a([i({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),a([i({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),a([i(x("preferredTimeReference"))],t.prototype,"preferredTimeZone",void 0),a([i()],t.prototype,"sourceJSON",void 0),a([i({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),a([V("sublayers",{layers:{type:[G]},visibleLayers:{type:[Z]}})],t.prototype,"writeSublayers",null),a([i({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),a([i({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),a([i(z)],t.prototype,"url",void 0),t=a([C("esri.layers.MapImageLayer")],t);const me=t;export{me as default};
